import { Icon } from "@raycast/api";
import { MenuItem } from "../types";

const MODIFIER_KEYCODES: Record<number, string> = {
  0: "‚åò", // Command only
  1: "‚áß ‚åò", // Shift+Command
  2: "‚å• ‚åò", // Option+Command
  3: "‚å• ‚áß ‚åò", // Option+Shift+Command
  4: "‚åÉ ‚åò", // Control+Command
  5: "‚åÉ ‚áß ‚åò", // Control+Shift+Command
  6: "‚åÉ ‚å• ‚åò", // Control+Option+Command
  7: "‚åÉ ‚å• ‚áß ‚åò", // Control+Option+Shift+Command
  8: "‚å•", // Option only
  9: "‚áß ‚å•", // Shift+Option
  10: "‚å• ‚åò", // Option+Command (alternative)
  11: "‚å• ‚áß ‚åò", // Option+Shift+Command (alternative)
  12: "‚åÉ", // Control only
  13: "‚åÉ ‚áß", // Control+Shift
  14: "‚åÉ ‚å•", // Control+Option
  15: "‚åÉ ‚å• ‚áß", // Control+Option+Shift
  16: "‚åò", // Command (alternative)
  17: "‚áß ‚åò", // Shift+Command (alternative)
  24: "Fn", // Function key
  25: "Fn ‚áß", // Function+Shift
  26: "Fn ‚å•", // Function+Option
  27: "Fn ‚å• ‚áß", // Function+Option+Shift
  28: "Fn ‚åÉ", // Function+Control
  29: "Fn ‚åÉ ‚áß", // Function+Control+Shift
  30: "Fn ‚åÉ ‚å•", // Function+Control+Option
  31: "Fn ‚åÉ ‚å• ‚áß", // Function+Control+Option+Shift
  32: "‚áß", // Shift only
  33: "‚áß ‚åò", // Shift+Command (alternative)
  40: "‚åÉ ‚åò", // Control+Command (alternative)
  48: "Fn ‚åò", // Function+Command
  49: "Fn ‚áß ‚åò", // Function+Shift+Command
  50: "Fn ‚å• ‚åò", // Function+Option+Command
  51: "Fn ‚å• ‚áß ‚åò", // Function+Option+Shift+Command
  52: "Fn ‚åÉ ‚åò", // Function+Control+Command
  53: "Fn ‚åÉ ‚áß ‚åò", // Function+Control+Shift+Command
  54: "Fn ‚åÉ ‚å• ‚åò", // Function+Control+Option+Command
  55: "Fn ‚åÉ ‚å• ‚áß ‚åò", // Function+Control+Option+Shift+Command
};

const GLYPH_KEYCODES: Record<number | string, string> = {
  4: "‚å´", // Backspace/Delete
  5: "‚á•", // Tab
  6: "‚á§", // Backtab
  11: "‚èé", // Enter/Return
  13: "‚èé", // Return/Enter (alternative)
  23: "‚å´", // Delete/Backspace
  27: "‚éã", // Escape
  28: "‚ê£", // Space
  30: "‚áû", // Page Up
  31: "‚áü", // Page Down
  63: "‚å¶", // Forward Delete
  71: "‚åß", // Clear
  76: "‚Ü©", // Return symbol
  79: "‚Üí", // Right Arrow
  80: "‚Üê", // Left Arrow
  81: "‚Üì", // Down Arrow
  82: "‚Üë", // Up Arrow
  100: "‚Üê", // Left Arrow (alternative)
  101: "‚Üí", // Right Arrow (alternative)
  104: "‚Üë", // Up Arrow (alternative)
  106: "‚Üì", // Down Arrow (alternative)
  114: "‚åó", // Number/Hash
  115: "‚Üñ", // Home
  116: "‚áû", // Page Up (alternative)
  117: "‚å¶", // Forward Delete (alternative)
  119: "‚Üò", // End
  121: "‚áü", // Page Down (alternative)
  123: "‚Üê", // Left Arrow (alternative)
  124: "‚Üí", // Right Arrow (alternative)
  125: "‚Üì", // Down Arrow (alternative)
  126: "‚Üë", // Up Arrow (alternative)
  149: "üåê", // Globe key
  150: "üé§", // Microphone
};

// Map special menu items to their SF Symbol icons
const SPECIAL_ICONS: Record<string, Icon> = {
  "Start Dictation": Icon.Microphone,
  "Emoji & Symbols": Icon.Globe,
};

/*
 * Handle replacing Fn with Globe icon
 */
function replaceFnWithGlobe(modifier: string) {
  const includesFn = modifier && /Fn\s?/.test(modifier);
  if (!includesFn) return { modifier, icon: null };

  return {
    modifier: modifier.replace(/Fn\s?/g, "").trim(),
    icon: Icon.Globe,
  };
}

// Helper function to determine accessories
export function getListItemAccessories(item: MenuItem) {
  if (SPECIAL_ICONS[item.shortcut]) {
    return [{ icon: SPECIAL_ICONS[item.shortcut] }];
  }

  if (item.submenu?.length) {
    return [{ tag: "Menu" }];
  }

  const modifier =
    item.modifier !== null ? MODIFIER_KEYCODES[item.modifier] : null;
  const glyph = item.glyph !== null ? GLYPH_KEYCODES[item.glyph] : null;

  if (modifier && (glyph || item.key)) {
    const modifierData = replaceFnWithGlobe(modifier);
    return [
      {
        icon: modifierData.icon,
        text: `${modifierData.modifier} ${glyph || item.key}`,
      },
    ];
  }

  return undefined;
}
